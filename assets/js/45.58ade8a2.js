(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{154:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"typescript介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" TypeScript介绍")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("TypeScript是微软开发的JavaScript的超集，TypeScript兼容JavaScript，可以载入JavaScript代码然后运行")])])]),e._v(" "),n("h2",{attrs:{id:"typescript与javascript的比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript与javascript的比较","aria-hidden":"true"}},[e._v("#")]),e._v(" TypeScript与JavaScript的比较")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("TypeScript与JavaScript相比进步的地方包括：加入注释，让编辑器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的对象语言。最大的好处就是加入了类型检查，可以让我们书写代码的时候更加规范。")])])]),e._v(" "),n("h2",{attrs:{id:"安装typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装typescript","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装TypeScript")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("npm install -g typescript")]),e._v(" "),n("li",[e._v("tsc --init")]),e._v(" "),n("li",[e._v("在后缀名为ts的文件中按下ctrl + shift + b会出现下面一个框，选择tsc:监视就可以了")]),e._v(" "),n("li",[e._v("tsc -p c:\\my\\ts\\tsconfig.json --watch")])])]),e._v(" "),n("h1",{attrs:{id:"基本数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 基本数据类型")]),e._v(" "),n("h3",{attrs:{id:"boolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#boolean","aria-hidden":"true"}},[e._v("#")]),e._v(" Boolean")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("var isBool : boolean = true;")])])]),e._v(" "),n("h3",{attrs:{id:"number"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#number","aria-hidden":"true"}},[e._v("#")]),e._v(" Number")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("var isNumber : number = 1;")])])]),e._v(" "),n("h3",{attrs:{id:"string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#string","aria-hidden":"true"}},[e._v("#")]),e._v(" String")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("var isString : string = 'hello world';")])])]),e._v(" "),n("h3",{attrs:{id:"array"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array","aria-hidden":"true"}},[e._v("#")]),e._v(" Array")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("var arr1 : number[] = [1,2,3]")]),e._v(" "),n("li",[e._v("var arr2 : Array"),n("string",[e._v(" = [1,2,3]")])],1),e._v(" "),n("li",[e._v("var arr2 : Array"),n("any",[e._v(" = [1,2,3]")])],1)])]),e._v(" "),n("h3",{attrs:{id:"enum"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enum","aria-hidden":"true"}},[e._v("#")]),e._v(" Enum")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('声明一个枚举类型 \nenum Color {Red,Green,Blue}\n\n上面代码编译成es5是\nvar Color;\n(function (Color) {\n    Color[Color["Red"] = 0] = "Red";\n    Color[Color["Green"] = 1] = "Green";\n    Color[Color["Blue"] = 2] = "Blue";\n})(Color || (Color = {})); \n\n在声明的时候可以对索引进行赋值\nenum Color {Red = 1,Green = 4,Blue};  \n\n获取枚举类型某个值的索引\nvar c : Color = Color.Blue \n')])])]),n("h2",{attrs:{id:"any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#any","aria-hidden":"true"}},[e._v("#")]),e._v(" Any")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("var notArr : Array"),n("any",[e._v(" = [1,'12',false]")])],1)])]),e._v(" "),n("h2",{attrs:{id:"void"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#void","aria-hidden":"true"}},[e._v("#")]),e._v(" Void")]),e._v(" "),n("blockquote",[n("p",[e._v("Void是对函数进行声明的,定义函数的时候，函数是要有返回值类型的，写了返回值类型如果不返回特定类型的值，就会报错。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function test1() : number{}\n上面代码会报错，因为返回值类型为number，没有返回。\n\n使用void声明函数的返回值类型，表示不需要有返回值。\nfunction test2() : void {}\n")])])]),n("h1",{attrs:{id:"typescript函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript函数","aria-hidden":"true"}},[e._v("#")]),e._v(" TypeScript函数")]),e._v(" "),n("h2",{attrs:{id:"参数类型和函数的返回值类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数类型和函数的返回值类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 参数类型和函数的返回值类型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("TypeScript函数中可以为参数和返回值设定类型。设定了之后必须要返回相对应的类型，否则会报错。例如：\n\nfunction add(x : number,y : number) : string {\n    return 'hello'\n}\n如果在参数部分想要简写的话，可以在前面指定参数的具体意义。\n\nconst myadd1:(name:string,age:number) => number = (n:string,a:number):number =>123;\n在声明函数的时候指定参数为name和age，在后面具体写参数的时候就可以直接使用n和a代替了。\n")])])]),n("h2",{attrs:{id:"可选参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可选参数","aria-hidden":"true"}},[e._v("#")]),e._v(" 可选参数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("在写函数参数的时候，在参数后面加?，这个参数就变成了可选参数。需要注意的是：可选参数后面不能出现确定参数。\n\nconst buildName = (firstName? : string, lastName? : string) : string => firstName + lastName ? lastName : \"\";\nbuildName('1');\n")])])]),n("h2",{attrs:{id:"默认参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认参数","aria-hidden":"true"}},[e._v("#")]),e._v(" 默认参数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const buildName = (firstName : string , lastName : string= 'hello' ) : string => firstName + lastName;\n")])])]),n("h2",{attrs:{id:"可变参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可变参数","aria-hidden":"true"}},[e._v("#")]),e._v(" 可变参数")]),e._v(" "),n("blockquote",[n("p",[e._v("如果我们在写代码的过程中，不确定要传入函数的参数是多少个，可以使用可变参数。\n使用剩余参数的形式，声明一个数组。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const peopleName = (firstName : string,...names:Array<string>) =>firstName + names.join(' ');\nlet pn = peopleName('1','2','3'); \n")])])]),n("h2",{attrs:{id:"函数的重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数的重载","aria-hidden":"true"}},[e._v("#")]),e._v(" 函数的重载")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function attr(name : string) : string;\nfunction attr(age : number) : number;\nfunction attr(nameAndAge : any) : any{\n    if(nameAndAge && typeof nameAndAge === 'string'){\n        console.log('姓名')\n    } else{\n        console.log('年龄');\n    }\n}\nattr('wang');\nattr(21);\n")])])]),n("h1",{attrs:{id:"typescript中的类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript中的类","aria-hidden":"true"}},[e._v("#")]),e._v(" TypeScript中的类")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("声明一个ts的类\n\nclass Person {\n    //声明变量为公有变量\n    name: string = 'wang';\n    age: number = 21;\n    //构造函数参数遵循函数参数的书写形式\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n    print(): string {\n        return this.name + \" : \" + this.age;\n    }\n}\nconst person = new Person('zhou', 20);\nconsole.log(person);\n")])])]),n("h2",{attrs:{id:"类的继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类的继承","aria-hidden":"true"}},[e._v("#")]),e._v(" 类的继承")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('ts中类的集成和ES6类似\n\nclass Person {\n    name : string;\n    age : number;\n    constructor(name : string , age :number) {\n        this.name = name;\n        this.age = age;\n    }\n    tell(){\n        return this.name + ":" + this.age;\n    }\n}\n//Student 继承自Person\nclass Student extends Person {\n    school : string;\n    constructor(name : string , age : number , school : sting){\n        super(name,age);\n        this.school = school;\n    }\n    tell(){\n        return this.name + " : " + this.age + " : " + this.school;\n    }\n}\n父类中有构造函数有参数传递，所以子类在继承父类的时候也需要在子类的构造函数中传递相应的参数。\n\n子类如果有构造函数必须在子类构造函数中使用super调用父类的构造函数。\n\nconst s = new Student(\'wang\',21,\'pdsu\');\nconsole.log(s.tell()); \n')])])]),n("h2",{attrs:{id:"访问修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问修饰符","aria-hidden":"true"}},[e._v("#")]),e._v(" 访问修饰符")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('和大多数面向对象语言相同，TypeScript也具有访问修饰符，TypeScript的访问修饰符有两种：\n\npublic 公有的\nprivate 私有的\n当什么都不写的话, 默认的是public。私有类型子类无法访问,公有方法可以访问。\n\nclass People {\n    private name : string;\n    public age : number;\n    constructor(name : string , age : number) {\n        this.name = name;\n        this.age = age;\n    }\n    print(){\n        return this.name + ":" + this.age;\n    }\n}\nclass Teacher extends People {\n    private school : string = \'pdsu\';\n    constructor(name : string , age : number , school : string) {\n        super(name,age);\n        this.school = school;\n    }\n    print(){\n        return this.name + ":" + this.age + ":" + this.school;\n    }\n}\n')])])]),n("h2",{attrs:{id:"get、set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get、set","aria-hidden":"true"}},[e._v("#")]),e._v(" get、set")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("由上面访问修饰符知道，私有属性在外部是无法得到的，并且在子类中无法得到。所以就可以通过set、get来对私有属性进行修改和查看。\n\n通过set和get来对private修饰的属性提供外部访问接口。\n\nclass Hello {\n    private _name : string = 'hello';\n    private _age : number;\n    tell(){\n        return this.name;\n    }\n    get name() : string {\n        return this._name;\n    }\n    set name(newName : string){\n        this._name = newName;\n    }\n    get age() : number{\n        return this._gae;\n    }\n    set age(newAge : number) {\n        if(newAge >=200 && newAge <0){\n            alert('请正确填写年龄')\n        }else{\n            this._age = newAge;\n        }\n    }\n}\nvar hello = new Hello();\nhello.name = 'hello';\n")])])]),n("h2",{attrs:{id:"static"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#static","aria-hidden":"true"}},[e._v("#")]),e._v(" static")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("使用static声明的属性和方法是静态的，编译成es5之后被挂载到构造函数上。\n\nclass Person {\n    static name1 : string = 'Person';\n    tell(){\n        console.log('姓名:' + Person.name1);\n    }\n}\nconst p = new Person();\nconsole.log(p.tell());\n")])])]),n("h2",{attrs:{id:"typescript的接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript的接口","aria-hidden":"true"}},[e._v("#")]),e._v(" TypeScript的接口")]),e._v(" "),n("blockquote",[n("p",[e._v("TypeScript中的接口可以在许多地方使用。它规范了参数传递的类型。")])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("例如：一个函数声明不使用接口")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function printLabel (labelObj : {label : string}){\n    console.log(labelObj.label);\n}\nlet myObj = {\n    label : "Hello",\n}\nprintLabel(myObj);\n')])])]),n("blockquote",[n("blockquote",[n("p",[e._v("上面代码中函数的参数如果很复杂，就会写的很臃肿。")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("使用接口就可以把参数规范抽离出来。")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("定义接口")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface LabelValue {\n    label : string;\n}\n指定参数类型为接口类型，接口中的属性和参数的实参是一一对应关系。如果不对应就会报错\n\nfunction printLabel(labelObj : LabelValue){\n    console.log(labelObj.label);\n}\nlet myObj = {\n    label : 'Hello wang',\n}\nprintLabel(myObj);\n")])])]),n("h2",{attrs:{id:"接口的可选属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口的可选属性","aria-hidden":"true"}},[e._v("#")]),e._v(" 接口的可选属性")]),e._v(" "),n("blockquote",[n("p",[e._v("上面得知，接口的属性和传入参数对象的属性是一一对应关系。当我们在声明接口的时候,并不是接口的每一个属性都可以用到,所以就需要使用可选属性.在interface中的属性上可以像函数的可选参数的方式定义接口的可选属性。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface USB {\n    name : string;\n    age? : number;\n}\nfunction printUSB(pu : USB){\n    console.log(pu.name);\n    console.log(pu.age);\n}\nlet myObj = {\n    name : 'Hello wang',\n    // age : 21,\n}\nprintUSB(myObj);\n")])])]),n("h2",{attrs:{id:"函数类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 函数类型")]),e._v(" "),n("blockquote",[n("p",[e._v("接口还可以直接作用于函数，定义函数的类型是什么。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface SearchFunc{\n    (socurce : string , subString:string) : boolean;\n}\n")])])]),n("blockquote",[n("p",[e._v("定义函数为接口类型，使用接口的规则进行声明函数。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let mySearch:SearchFunc;\n//这里接口的检查是针对类型的检查，并不针对参数名，所以只要参数的类型相同，参数名不相同也无所谓。\nmySearch = function (src : string , sub : string){\n    let result = src.search(sub);\n    if(result != -1){\n        return true;\n    }else{\n        return false;\n    }\n}\n")])])]),n("h2",{attrs:{id:"数组类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 数组类型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("接口还可以规范数组的类型\ninterface StringArray{\n    [index : number] : string;\n}\n定义数组的类型为接口类型，接口定义数组类型为索引为number类型，数组中的值为string类型\n\nlet myArray : StringArray;\nmyArray = ['wang','chong','1'];\nconsole.log(myArray);\n")])])]),n("h2",{attrs:{id:"使用类实现接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用类实现接口","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用类实现接口")]),e._v(" "),n("blockquote",[n("p",[e._v("在与类的配合中，接口定义一系列规则，使用类去实现。")])]),e._v(" "),n("blockquote",[n("p",[e._v("在接口里面只定义属性和方法，而不实现。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface ClockInterface{\n    currentTime : Date;\n    //只是定义函数\n    setTime(d : Date);\n}\n")])])]),n("blockquote",[n("p",[e._v("类使用接口通过implement关键字实现。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Clock implements ClockInterface{\n    //ClockInterface中定义了currentTime属性，所以在类中必须要实现\n    currentTime : Date;\n    constructor(h : number , m :number){\n\n    }\n    //ClockInterface中定义了setTime属性，所以在类中必须要实现\n    setTime(d : Date){\n        this.currentTime = d;\n    }\n} \n")])])]),n("h2",{attrs:{id:"接口继承与混合类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口继承与混合类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 接口继承与混合类型")]),e._v(" "),n("blockquote",[n("p",[e._v("接口是存在继承的，一个接口可以继承自另外一个接口。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Shape {\n    color : string;\n}\ninterface  PenStroke{\n    penWidth : number;\n}\n")])])]),n("blockquote",[n("p",[e._v("使用接口继承另外一个接口，同时也可以继承多个接口")])]),e._v(" "),n("blockquote",[n("p",[e._v("单继承")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Square extends PenStroke{\n    sideLength : number;\n}\n")])])]),n("blockquote",[n("p",[e._v("多继承")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Square extends Shape,PenStroke{\n    sideLength : number;\n}\n")])])]),n("blockquote",[n("p",[e._v("创建一个对象为接口类型，这种方式与之前的数组和函数略有不同。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let s = <Square>{};\ns.color = 'blue';\ns.sideLength = 10;\ns.penWidth = 10;\n")])])]),n("blockquote",[n("p",[e._v("混合类型就是在接口中存在多种规则。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Counter{\n    interVal :number;\n    reset():void;\n    (start : number) :string;\n}\nvar w : Counter;\n")])])]),n("h2",{attrs:{id:"typescript泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript泛型","aria-hidden":"true"}},[e._v("#")]),e._v(" TypeScript泛型")]),e._v(" "),n("blockquote",[n("p",[e._v("下面这样一个方法，传入一个number返回一个number。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let Hello = (num : number) : number => num;\n")])])]),n("blockquote",[n("p",[e._v("突然需求变了，这个方法不确定传入什么类型，也不确定要输出什么类型。")])]),e._v(" "),n("blockquote",[n("p",[e._v("可以使用any解决。定义参数类型为any类型，返回值也是any类型。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let HelloAny = (str : any) : any =>str;\n")])])]),n("blockquote",[n("p",[e._v("但是上面这种方式不怎么好的，没有一个明显的规范，容易出现类型转换错误。")])]),e._v(" "),n("blockquote",[n("p",[e._v("因此在这个场景下用可以用到泛型。泛型的写法 :")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let Hello1 = <T>(str : T) : T => str;\n")])])]),n("blockquote",[n("p",[e._v("泛型在当我们需要调用函数的时候就确定函数的类型和参数类型。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let output = Hello1<string>('hello');\n")])])]),n("h2",{attrs:{id:"定义数组泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义数组泛型","aria-hidden":"true"}},[e._v("#")]),e._v(" 定义数组泛型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("当我们写一个泛型的时候，如果在代码中调用泛型的length，就会报错。\n\nlet Hello = <T>(num : T):T => {\n    console.log(num.length);        //编译报错，泛型没有length属性\n    return num;\n};\n解决方法是：泛型是根据所传递的类型决定具有哪些属性，上面没有指定类型，这里指定了泛型的类型为数组。\n\nlet Hello = <T> (num : T[]):T[] =>{\n    return num;\n}\nlet list : Array<string> = Hello<string>(['1','2']);\nfor(let item of list){\n    console.log(item);\n}\n")])])]),n("h2",{attrs:{id:"泛型类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 泛型类型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("定义一个函数为泛型\n\nlet hello = <T> (arg : T) : T => arg;\n定义一个变量为泛型并且把上面的泛型函数复制给变量\n\nlet myHello : <K>(arg : K) => K = hello;\n//和上面功能相同\nlet myHello : {<K>(arg : K):K} = hello;\n此时这个myHello就是hello这个函数。\n\n定义一个接口，其中有一个函数为泛型\n\ninterface Hello {\n    <T>(arg : T) : T;\n}\n定义一个泛型函数\n\nfunction myHello <T>(args : T):T{\n    return args;\n}\n定义变量为接口类型并把泛型函数复制与变量\n\nvar MH:Hello = myHello;\nlet mh : Hello<number> = myHello;   //可以在赋值的时候指定\nconsole.log(MH<string>('hello'));   //也可在调用的时候指定类型。\n这时，MH函数和myHello函数相同。\n")])])]),n("h2",{attrs:{id:"泛型类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型类","aria-hidden":"true"}},[e._v("#")]),e._v(" 泛型类")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("定义一个泛型类\n\nclass HelloNumber<T>{\n    ten : T;\n    add : (x : T , y : T) => T;\n}\nlet myHelloNumber = new HelloNumber<number>();\nmyHelloNumber.ten = 10;\nmyHelloNumber.add = function (x,y){\n    return x + y;\n}\n")])])]),n("h2",{attrs:{id:"module和namespace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#module和namespace","aria-hidden":"true"}},[e._v("#")]),e._v(" module和namespace")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ts的模块用于封装变量和函数，有利于代码的模块化和可重用性。\n\n在早期没有模块的时候，书写代码是这样。\n\ninterface StringValidator{\n isAcceptable(s : string) : boolean;\n}\nlet lettersRegexp = (str) => /^[A-Za-z]+$/.test(str);\nlet numberRegexp = (str) => /^[0-9]+$/.test(str);\nclass LetterOnlyValidator implements StringValidator{\n \nisAcceptable(s : string) : boolean{\n    return lettersRegexp(s);\n}\n}\nclass ZipCodeValidor implements StringValidator{\n isAcceptable(s:string):boolean{\n     return s.length == 5 && numberRegexp(s);\n }\n}\n每一次使用在这里都需要调用。\n\nTypeScript中早期使用module来作为模块化。\n\n//module.ts\nexport module Validation{\n     export interface StringValidator{\n         isAcceptable(s : string) : boolean;\n     }\n     let lettersRegexp = (str) => /^[A-Za-z]+$/.test(str);\n     let numberRegexp = (str) => /^[0-9]+$/.test(str);\n     export class LetterOnlyValidator implements StringValidator{\n         isAcceptable(s : string):boolean {\n             return lettersRegexp(s);\n         }\n     }\n     export class ZipCodeValidor implements StringValidator{\n         isAcceptable(s : string) : boolean{\n             return numberRegexp(s);\n         }\n     }\n }\n我们在想使用的时候可以按照下面这种方式来使用\n\nconst letterOnlyValidator = new Validation.LetterOnlyValidator();\n由于1.5版本的更新和ES6的出现，把module改成了namespace\n\nnamespace Validation{\n    export interface StringValidator{\n        isAcceptable(s : string) : boolean;\n    }\n    const lettersRegexp = (str) => /^[A-Za-z]+$/.test(str);\n    const numberRegexp = (str) => /^[0-9]+$/.test(str);\n    export class LettersOnlyValidator implements StringValidator{\n        isAcceptable(s : string) : boolean {\n            return lettersRegexp(s);\n        }\n    }\n    export class ZipCodeValidator implements StringValidator{\n        isAcceptable(s : string) :boolean {\n            return numberRegexp(s);\n        }\n    }\n}\n")])])]),n("h2",{attrs:{id:"typescript装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript装饰器","aria-hidden":"true"}},[e._v("#")]),e._v(" TypeScript装饰器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('装饰器是一种特殊的函数声明，用于在编译时对类、类的方法、类的属性、类的方法的参数进行处理。\n\n使用装饰器需要在tsconfig.json中加上一个字段\n\n{\n    "compilerOptions" : {\n        "target" : "es5",\n        "module" : "commonjs",\n        "outDir" : "out",\n        "sourceMap" : true,\n+        "experimentalDecorators": true\n    }\n}\n装饰器的简单应用\n定义一个装饰器\n\nfunction hello(target){\n    console.log(\'wang\');\n}\n在类中使用装饰器\n\n@hello\nclass Hello {\n\n} \n')])])]),n("h2",{attrs:{id:"定义一个装饰器工厂"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义一个装饰器工厂","aria-hidden":"true"}},[e._v("#")]),e._v(" 定义一个装饰器工厂")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("从上面可以看出在类中调用装饰器是不能传入参数的，如果要传入参数可以封装一个装饰器工厂。\n\nfunction color(value : string) {    //这是一个装饰器工厂\n    console.log(value);\n    return function(target){        //这是一个装饰器\n        console.log(target);\n    }\n}\n//使用\n@color('123')\nclass Test{\n\n} \n")])])]),n("h2",{attrs:{id:"多个装饰器调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多个装饰器调用","aria-hidden":"true"}},[e._v("#")]),e._v(" 多个装饰器调用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('当在一个类上有多个装饰器调用的时候相当于复合函数。例如：\n\n定义多个装饰器\n\nfunction f(){\n    console.log("f : start");\n    return function(target) {\n        console.log("f : end");\n    }\n}\nfunction g(){\n    console.log("g : start");\n    return function(target) {\n        console.log("g end");\n    }\n}\n使用装饰器\n\n@f()\n@g()\nclass Test{\n    method(){\n\n    }\n} \n上面输出结果为：f : start -> g : start -> g end ->f : end,即方法调用方式可以看做f(g())。\n')])])]),n("h2",{attrs:{id:"方法装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法装饰器","aria-hidden":"true"}},[e._v("#")]),e._v(" 方法装饰器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('上面都是使用的类的装饰器，来看一下方法装饰器。\n\n方法装饰器可以传入三个参数：\n\n第一个参数：对静态成员来说是类的构造函数，对于实例成员来说就实例的原型对象。\n第二个参数：方法成员的名字\n第三个参数：方法成员的属性描述对象\nonst enumerable = (value : boolean) => (target : any,propertyKey : string , descriptor :PropertyDescriptor) => {\n                console.log(123);\n                return descriptor.enumerable = value;}\nclass Greeters {\n    greeting : string;\n    constructor(message : string) {\n        this.greeting = message;\n    }\n    @enumerable(false)\n    Greeter(){\n        return "Hello," + this.greeting;\n    }\n访问器装饰器\n也可以成为get方法装饰器。访问器装饰器声明在一个访问器的声明之前，并且访问器装饰器用于访问器的属性描述符，并且可以监视、修改、或者替换一个访问器的定义。\n\n访问器装饰器可以传入三个参数。\n\n第一个参数：对静态成员来说是类的构造函数，对于实例成员来说就实例的原型对象。\n第二个参数：方法成员的名字\n第三个参数：方法成员的属性描述对象\nconst configurable = (value : boolean) => (target : any , propertyKey : string , descriptor : PropertyDescriptor)=>{\n                    descriptor.configurable = value;\n                }\nclass Point {\n    private _x : number;\n    private _y : number;\n    constructor(x : number , y : number ){\n        this._x = x;\n        this._y = y;\n    }\n    @configurable(false)\n    get x(){\n        return this._x;\n    }\n    @configurable(false)\n    get y(){\n        return this._y;\n    }\n\n} \n')])])]),n("h2",{attrs:{id:"属性装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性装饰器","aria-hidden":"true"}},[e._v("#")]),e._v(" 属性装饰器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("属性装饰器饰器有两个参数：\n\n第一个参数：对于静态属性来说是类的构造函数，对于实例成员来说是实例成员的原型对象。\n第二个参数是成员的名字。\nconst configurable = (value : boolean) => (target : any , propertyKey : string) => console.log(value);\nclass Hello {\n    @configurable(true)\n    name : string;\n} \n")])])]),n("h2",{attrs:{id:"方法参数装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法参数装饰器","aria-hidden":"true"}},[e._v("#")]),e._v(" 方法参数装饰器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("方法参数装饰器可以传入三个参数：\n\n第一个参数：对静态成员来说是类的构造函数，对于实例成员来说就实例的原型对象。\n第二个参数：参数成员的名字\n第三个参数：参数在函数参数列表中的索引\n参数装饰器只能用于监视一个方法的参数是否被传入。\n\nconst require = (value : boolean) => (target : any , propertyKey : string ,index : number) => console.log(value);\nclass Hello{\n    test(@require(false) name : string){\n\n    }\n}\n")])])]),n("h2",{attrs:{id:"mixin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixin","aria-hidden":"true"}},[e._v("#")]),e._v(" Mixin")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Mixin用于使用一个类去继承多个类的方式。\n\nconst copyProperties = (target : any,source : any) => {\n    for(let key of Reflect.ownKeys(source)){\n        if(key !=='constructor' && key !== 'prototype' && key !== 'name'){\n            let desc = Object.getOwnPropertyDescriptor(source,key);\n            Object.defineProperty(target,key,desc);\n        }\n    }\n}\n\nfunction Mixins(...mixins){\n    class Mix{\n        constructor(){\n            for(let mixin of mixins){\n                copyProperties(this,new mixin()) //拷贝实例属性\n            }\n        }\n    }\n    for(let mixin of mixins){\n        copyProperties(Mix,mixin);  //拷贝静态属性\n        copyProperties(Mix.prototype,mixin.prototype);  //拷贝原型属性\n    }\n    return Mix;\n}\n定义多个类\n\nclass Apple {\n    isDisposed : boolean;\n    dispose(){\n        this.isDisposed = true;\n    }\n}\nclass Peach {\n    isActive : boolean;\n    activate(){\n        this.isActive = true;\n    }\n    deactivate(){\n        this.isActive = false;\n    }\n}\n使用一个类去继承多个类\n\nclass SmartObject extends Mixins(Apple,Peach){\n    constructor(){\n        super();\n    }\n}\n")])])]),n("h2",{attrs:{id:"三斜线指令和错误信息列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三斜线指令和错误信息列表","aria-hidden":"true"}},[e._v("#")]),e._v(" 三斜线指令和错误信息列表")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('三斜线指令\n三斜线指令是包含单个XML标签的单行注释。注释的内容或作为编译器的指令来使用。\n\n三斜线指令仅仅只能放在代码的最前面，三斜线指令上前面只能有注释不能有代码，如果三斜线指令前面有代码，那么三斜线指令就会被认为普通的注释来解析。\n\n/// <reference path ="...." />\n')])])])])},[],!1,null,null,null);t.default=r.exports}}]);