(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{169:function(e,a,n){"use strict";n.r(a);var t=n(0),s=Object(t.a)({},function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"优化原因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化原因","aria-hidden":"true"}},[e._v("#")]),e._v(" 优化原因")]),e._v(" "),n("blockquote",[n("p",[e._v("构建打点")]),e._v(" "),n("ul",[n("li",[e._v("speed-measure-webpack-plugin，它能够测量出在你的构建过程中，每一个 Loader 和 Plugin 的执行时长")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const SpeedMeasurePlugin = require("speed-measure-webpack-plugin");\nconst smp = new SpeedMeasurePlugin();\nmodule.exports = smp.wrap(YourWebpackConfig);\n')])])]),n("blockquote",[n("ul",[n("li",[e._v("大部分的执行时长应该都是消耗在编译 JS、CSS 的 Loader 以及对这两类代码执行压缩操作的 Plugin 上。因为webpack编译器（这里可以指 webpack）需要将我们写下的字符串代码转化成 AST（语法分析树）")]),e._v(" "),n("li",[e._v('之所以构建时长会集中消耗在代码的编译或压缩过程中，正是因为它们需要去遍历树以替换字符或者说转换语法，因此都需要经历"转化 AST -> 遍历树 -> 转化回代码"这样一个过程')])])]),e._v(" "),n("h2",{attrs:{id:"优化策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化策略","aria-hidden":"true"}},[e._v("#")]),e._v(" 优化策略")]),e._v(" "),n("blockquote",[n("p",[e._v("1.缓存")]),e._v(" "),n("blockquote",[n("p",[e._v("大部分 Loader 都提供了 cache 配置项，比如在 babel-loader 中，可以通过设置 cacheDirectory 来开启缓存\n如果 loader 不支持缓存呢？我们也有方法。接下来介绍一款神器：cache-loader ，它所做的事情很简单，就是 babel-loader 开启 cache 后做的事情，将 loader 的编译结果写入硬盘缓存，再次构建如果文件没有发生变化则会直接拉取缓存。")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.ext$/,\n        use: ['cache-loader', ...loaders],\n        include: path.resolve('src'),\n      },\n    ],\n  },\n};\n\n")])])]),n("blockquote",[n("blockquote",[n("p",[e._v("构建流程造成效率瓶颈的代码压缩阶段，也可以通过缓存解决大部分问题，以 uglifyjs-webpack-plugin 这款对于我们最常用的 Plugin 为例")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        cache: true,\n        parallel: true,\n      }),\n    ],\n  },\n};\n\n")])])]),n("blockquote",[n("p",[e._v("2.多核")]),e._v(" "),n("blockquote",[n("p",[e._v("happypack")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const HappyPack = require('happypack')\nconst os = require('os')\n// 开辟一个线程池\n// 拿到系统CPU的最大核数，happypack 将编译工作灌满所有线程\nconst happyThreadPool = HappyPack.ThreadPool({ size: os.cpus().length })\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: 'happypack/loader?id=js',\n      },\n    ],\n  },\n  plugins: [\n    new HappyPack({\n      id: 'js',\n      threadPool: happyThreadPool,\n      loaders: [\n        {\n          loader: 'babel-loader',\n        },\n      ],\n    }),\n  ],\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("PS：这里需要特别提及一个在 production 模式下容易遇到的坑，因为有个特殊的角色出现了 —— mini-css-extract-plugin，坑在哪呢？有两点（这也是笔者在书写本文时还未解决的问题）：\n\nMiniCssExtractPlugin 无法与 happypack 共存，如果用 happypack 对 MiniCssExtractPlugin 进行包裹，就会触发这个问题：github.com/amireh/happ… 。\nMiniCssExtractPlugin 必须置于 cache-loader 执行之后，否则无法生效，参考issue：github.com/webpack-con… 。\n\n")])])]),n("blockquote",[n("blockquote",[n("p",[e._v("所以最后，在 production 模式下的 CSS Rule 配置就变成了下面这样：")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = {\n    ...,\n    module: {\n        rules: [\n            ...,\n            {\n                test: /\\.css$/\n                exclude: /node_modules/,\n                use: [\n                    _mode === 'development' ? 'style-loader' : MiniCssExtractPlugin.loader,\n                    'happypack/loader?id=css'\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new HappyPack({\n          id: 'css',\n          threadPool: happyThreadPool,\n          loaders: [\n            'cache-loader',\n            'css-loader',\n            'postcss-loader',\n          ],\n        }),\n    ],\n}\n")])])]),n("blockquote",[n("p",[e._v("3.抽离")]),e._v(" "),n("blockquote",[n("p",[e._v("webpack-dll-plugin 与 Externals 的抉择")])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("坚定的 Externals 的支持着，这不是心之所向，先让我们来细数 webpack-dll-plugin 的三宗原罪：")])])]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("需要配置在每次构建时都不参与编译的静态依赖，并在首次构建时为它们预编译出一份 JS 文件（后文将称其为 lib 文件），每次更新依赖需要手动进行维护，一旦增删依赖或者变更资源版本忘记更新，就会出现 Error 或者版本错误。")])])]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v('无法接入浏览器的新特性 script type="module"，对于某些依赖库提供的原生 ES Modules 的引入方式（比如 vue 的新版引入方式）无法得到支持，没法更好地适配高版本浏览器提供的优良特性以实现更好地性能优化。')])])]),e._v(" "),n("blockquote",[n("blockquote",[n("p",[e._v("如何更为优雅地编写 Externals")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('module.exports = {\n  ...,\n  externals: {\n    // key是我们 import 的包名，value 是CDN为我们提供的全局变量名\n    // 所以最后 webpack 会把一个静态资源编译成：module.export.react = window.React\n    "react": "React",\n    "react-dom": "ReactDOM",\n    "redux": "Redux",\n    "react-router-dom": "ReactRouterDOM"\n  }\n}\n\n')])])]),n("blockquote",[n("p",[e._v("4.拆分\n"),n("strong",[e._v("集群编译")])])]),e._v(" "),n("h2",{attrs:{id:"提升体验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#提升体验","aria-hidden":"true"}},[e._v("#")]),e._v(" 提升体验")]),e._v(" "),n("blockquote",[n("p",[e._v("progress-bar-webpack-plugin 构建的进度条\nwebpack-build-notifier")])]),e._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("blockquote",[n("p",[e._v("综上所述，其实本质上，我们对与webpack构建效率的优化措施也就两个大方向：缓存和多核。缓存是为了让二次构建时，不需要再去做重复的工作；而多核，更是充分利用了硬件本身的优势（我相信现如今大家的电脑肯定都是双核以上了吧，我自己这台公司发的低配 MAC 都有双核），让我们的复杂工作都能充分利用我们的 CPU。而将这两个方向化为实践的主角，也是我们前面介绍过的两大王牌，就是：cache-loader 和 happypack，所以你只要知道它并用好它，那你就能做到更好的构建优化实践。")])]),e._v(" "),n("p",[e._v("https://juejin.im/post/5d614dc96fb9a06ae3726b3e")])])},[],!1,null,null,null);a.default=s.exports}}]);