(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{157:function(e,t,n){"use strict";n.r(t);var a=n(0),s=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_1-react-一直都提倡使用函数组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-react-一直都提倡使用函数组件","aria-hidden":"true"}},[e._v("#")]),e._v(" 1 React 一直都提倡使用函数组件")]),e._v(" "),n("h2",{attrs:{id:"_2-凡是-use-开头的-react-api-都是-hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-凡是-use-开头的-react-api-都是-hooks","aria-hidden":"true"}},[e._v("#")]),e._v(" 2 凡是 use 开头的 React API 都是 Hooks")]),e._v(" "),n("h2",{attrs:{id:"_3-hooks-解决的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-hooks-解决的问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 3 Hooks 解决的问题")]),e._v(" "),n("ol",[n("li",[e._v("类组件的不足")])]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("状态逻辑难复用")])]),e._v(" "),n("ul",[n("li",[e._v("趋向复杂难以维护")])]),e._v(" "),n("ul",[n("li",[e._v("this 指向问题")])])]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("Hooks 优势")])]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("能优化类组件的三大问题")])]),e._v(" "),n("ul",[n("li",[e._v("能在无需修改组件结构的情况下复用状态逻辑（自定义 Hooks ）")])]),e._v(" "),n("ul",[n("li",[e._v("能将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）")])]),e._v(" "),n("ul",[n("li",[e._v("副作用的关注点分离：副作用指那些没有发生在数据向视图转换过程中的逻辑，如 ajax 请求、访问原生dom 元素、本地持久化缓存、绑定/解绑事件、添加订阅、设置定时器、记录日志等。以往这些副作用都是写在类组件生命周期函数中的。而 useEffect 在全部渲染完毕后才会执行，useLayoutEffect 会在浏览器 layout 之后，painting 之前执行。")])])]),e._v(" "),n("h2",{attrs:{id:"_4-注意事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-注意事项","aria-hidden":"true"}},[e._v("#")]),e._v(" 4 注意事项")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("只能在函数内部的最外层调用 Hook，不要在循环、条件判断或者子函数中调用")])]),e._v(" "),n("ul",[n("li",[e._v("只能在 React 的函数组件中调用 Hook，不要在其他 JavaScript 函数中调用")])])]),e._v(" "),n("h2",{attrs:{id:"_5-usestate-usememo-usecallback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-usestate-usememo-usecallback","aria-hidden":"true"}},[e._v("#")]),e._v(" 5 useState & useMemo & useCallback")]),e._v(" "),n("blockquote",[n("p",[e._v("React 假设当你多次调用 useState 的时候，你能保证每次渲染时它们的调用顺序是不变的。")])]),e._v(" "),n("blockquote",[n("p",[e._v("通过在函数组件里调用它来给组件添加一些内部 state，React会 在重复渲染时保留这个 state")])]),e._v(" "),n("blockquote",[n("p",[e._v("useState 唯一的参数就是初始 state")])]),e._v(" "),n("blockquote",[n("p",[e._v("useState 会返回一个数组：一个 state，一个更新 state 的函数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import React, { useState } from "react";\nimport ReactDOM from "react-dom";\n\nfunction Child1(porps) {\n  console.log(porps);\n  const { num, handleClick } = porps;\n  return (\n    <div\n      onClick={() => {\n        handleClick(num + 1);\n      }}\n    >\n      child\n    </div>\n  );\n}\n\nfunction Child2(porps) {\n  // console.log(porps);\n  const { text, handleClick } = porps;\n  return (\n    <div>\n      child2\n      <Grandson text={text} handleClick={handleClick} />\n    </div>\n  );\n}\n\nfunction Grandson(porps) {\n  console.log(porps);\n  const { text, handleClick } = porps;\n  return (\n    <div\n      onClick={() => {\n        handleClick(text + 1);\n      }}\n    >\n      grandson\n    </div>\n  );\n}\n\nfunction Parent() {\n  let [num, setNum] = useState(0);\n  let [text, setText] = useState(1);\n\n  return (\n    <div>\n      <Child1 num={num} handleClick={setNum} />\n      <Child2 text={text} handleClick={setText} />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById("root");\nReactDOM.render(<Parent />, rootElement);\n')])])]),n("blockquote",[n("p",[e._v("每次渲染都是独立的闭包")]),e._v(" "),n("ul",[n("li",[e._v("每一次渲染都有它自己的 Props 和 State")])]),e._v(" "),n("ul",[n("li",[e._v("每一次渲染都有它自己的事件处理函数")])]),e._v(" "),n("ul",[n("li",[e._v("当点击更新状态的时候，函数组件都会重新被调用，那么每次渲染都是独立的，>- 取到的值不会受后面操作的影响")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Counter2(){\n  let [number,setNumber] = useState(0);\n  function alertNumber(){\n    setTimeout(()=>{\n      // alert 只能获取到点击按钮时的那个状态\n      alert(number);\n    },3000);\n  }\n  return (\n      <>\n          <p>{number}</p>\n          <button onClick={()=>setNumber(number+1)}>+</button>\n          <button onClick={alertNumber}>alertNumber</button>\n      </>\n  )\n}\n")])])]),n("blockquote",[n("p",[e._v("函数式更新")]),e._v(" "),n("ul",[n("li",[e._v("如果新的 state 需要通过使用先前的 state 计算得出，那么可以将回调函数当做参数传递给 setState。该回调函数将接收先前的 state，并返回一个更新后的值。")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Counter(){\n  let [number,setNumber] = useState(0);\n  function lazy(){\n      setTimeout(() => {\n          // setNumber(number+1);\n          // 这样每次执行时都会去获取一遍 state，而不是使用点击触发时的那个 state\n          setNumber(number=>number+1);\n      }, 3000);\n  }\n  return (\n      <>\n         <p>{number}</p>\n         <button onClick={()=>setNumber(number+1)}>+</button>\n         <button onClick={lazy}>lazy</button>\n      </>\n  )\n}\n")])])]),n("blockquote",[n("p",[e._v("性能优化")])]),e._v(" "),n("ol",[n("li",[e._v("默认情况，只要父组件状态变了（不管子组件依不依赖该状态），子组件也会重新渲染")]),e._v(" "),n("li",[e._v("一般的优化：")])]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("类组件：可以使用 pureComponent ；")])]),e._v(" "),n("ul",[n("li",[e._v("函数组件：使用 React.memo ，将函数组件传递给 memo 之后，就会返回一个新的组件，新组件的功能：如果接受到的属性不变，则不重新渲染函数；")])]),e._v(" "),n("ul",[n("li",[e._v("但是怎么保证属性不会变尼？这里使用 useState ，每次更新都是独立的，const [number,setNumber] = useState(0) 也就是说每次都会生成一个新的值（哪怕这个值没有变化），即使使用了 React.memo ，也还是会重新渲染")])])]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("更深入的优化：")])]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("useCallback：接收一个内联回调函数参数和一个依赖项数组（子组件依赖父组件的状态，即子组件会使用到父组件的值） ，useCallback 会返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新")])]),e._v(" "),n("ul",[n("li",[e._v("useMemo：把创建函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算")])])]),e._v(" "),n("h2",{attrs:{id:"_6-usereducer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-usereducer","aria-hidden":"true"}},[e._v("#")]),e._v(" 6 useReducer")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("useReducer 和 redux 中 reducer 很像")])]),e._v(" "),n("ul",[n("li",[e._v("useState 内部就是靠 useReducer 来实现的")])]),e._v(" "),n("ul",[n("li",[e._v("useState 的替代方案，它接收一个形如 (state, action) => newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法")])]),e._v(" "),n("ul",[n("li",[e._v("在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等")])])]),e._v(" "),n("h2",{attrs:{id:"_7-usecontext"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-usecontext","aria-hidden":"true"}},[e._v("#")]),e._v(" 7 useContext")]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值")])]),e._v(" "),n("ul",[n("li",[e._v("当前的 context 值由上层组件中距离当前组件最近的 <MyContext.Provider> 的 value prop 决定")])]),e._v(" "),n("ul",[n("li",[e._v("当组件上层最近的 <MyContext.Provider> 更新时，该 Hook 会触发重渲染，并使用最新传递给 MyContext provider 的 context value 值")])]),e._v(" "),n("ul",[n("li",[e._v("useContext(MyContext) 相当于 class 组件中的 static contextType = MyContext 或者 <MyContext.Consumer>")])]),e._v(" "),n("ul",[n("li",[e._v("useContext(MyContext) 只是让你能够读取 context 的值以及订阅 context 的变化。你仍然需要在上层组件树中"),n("strong",[e._v("使用 <MyContext.Provider> 来为下层组件提供 context")])])])]),e._v(" "),n("h2",{attrs:{id:"_8-useeffect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-useeffect","aria-hidden":"true"}},[e._v("#")]),e._v(" 8 useEffect")]),e._v(" "),n("blockquote",[n("p",[e._v("useEffect 接收一个函数，该函数会在组件渲染到屏幕之后才执行，该函数有要求：要么返回一个能清除副作用的函数，要么就不返回任何内容")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Counter(){\n    const [number,setNumber] = useState(0);\n    // useEffect里面的这个函数会在第一次渲染之后和更新完成后执行\n    // 相当于 componentDidMount 和 componentDidUpdate:\n    useEffect(() => {\n        document.title = `你点击了${number}次`;\n    });\n    return (\n        <>\n            <p>{number}</p>\n            <button onClick={()=>setNumber(number+1)}>+</button>\n        </>\n    )\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("useEffect(()=>{\n        console.log('开启一个新的定时器')\n        let $timer = setInterval(()=>{\n            setNumber(number=>number+1);\n        },1000);\n        // useEffect 如果返回一个函数的话，该函数会在组件卸载和更新时调用\n        // useEffect 在执行副作用函数之前，会先调用上一次返回的函数\n        // 如果要清除副作用，要么返回一个清除副作用的函数\n       /*  return ()=>{\n            console.log('destroy effect');\n            clearInterval($timer);\n        } */\n    });\n")])])]),n("blockquote",[n("p",[e._v("跳过 effect 进行性能优化")])]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("依赖项数组控制着 useEffect 的执行")])]),e._v(" "),n("ul",[n("li",[e._v("如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React 跳过对 effect 的调用，只要传递数组作为 useEffect 的第二个可选参数即可")])]),e._v(" "),n("ul",[n("li",[e._v("如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（[]）作为第二个参数。这就告诉 React 你的 effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行")])]),e._v(" "),n("ul",[n("li",[e._v("推荐启用 eslint-plugin-react-hooks 中的 exhaustive-deps 规则。此规则会在添加错误依赖时发出警告并给出修复建议。")])])]),e._v(" "),n("blockquote",[n("p",[e._v("使用多个 Effect 实现关注点分离")]),e._v(" "),n("ul",[n("li",[e._v("Hook 允许我们按照代码的用途分离他们， 而不是像生命周期函数那样。React 将按照 effect 声明的顺序依次调用组件中的 每一个 effect。")])])]),e._v(" "),n("h2",{attrs:{id:"_9-常见问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-常见问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 9 常见问题")]),e._v(" "),n("blockquote",[n("p",[e._v("使用 eslint-plugin-react-hooks 来检查代码错误，给出提示")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "plugins": ["react-hooks"],\n  // ...\n  "rules": {\n    "react-hooks/rules-of-hooks": \'error\',// 检查 Hook 的规则\n    "react-hooks/exhaustive-deps": \'warn\' // 检查 effect 的依赖\n  }\n}\n\n')])])])])},[],!1,null,null,null);t.default=s.exports}}]);