(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{189:function(n,e,t){"use strict";t.r(e);var a=t(0),r=Object(a.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"decorator-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decorator-应用","aria-hidden":"true"}},[n._v("#")]),n._v(" Decorator 应用")]),n._v(" "),t("blockquote",[t("p",[n._v("装饰器主要用于:装饰类,装饰方法或属性")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("装饰类\n@annotation\nclass MyClass { }\n\nfunction annotation(target) {\n   target.annotated = true;\n}\n装饰方法或属性\nclass MyClass {\n  @readonly\n  method() { }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n")])])]),t("h2",{attrs:{id:"babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel","aria-hidden":"true"}},[n._v("#")]),n._v(" Babel")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('npm init\n\nnpm install --save-dev @babel/core @babel/cli\n\nnpm install --save-dev @babel/plugin-proposal-decorators @babel/plugin-proposal-class-properties\n新建 .babelrc 文件\n{\n  "plugins": [\n    ["@babel/plugin-proposal-decorators", { "legacy": true }],\n    ["@babel/plugin-proposal-class-properties", {"loose": true}]\n  ]\n}\n再编译指定的文件\nbabel decorator.js --out-file decorator-compiled.js\n')])])]),t("h2",{attrs:{id:"应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[n._v("#")]),n._v(" 应用")]),n._v(" "),t("h3",{attrs:{id:"log"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#log","aria-hidden":"true"}},[n._v("#")]),n._v(" log")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("为一个方法添加 log 函数，检查输入的参数：\nclass Math {\n  @log\n  add(a, b) {\n    return a + b;\n  }\n}\n\nfunction log(target, name, descriptor) {\n  var oldValue = descriptor.value;\n\n  descriptor.value = function(...args) {\n    console.log(`Calling ${name} with`, args);\n    return oldValue.apply(this, args);\n  };\n\n  return descriptor;\n}\n\nconst math = new Math();\n\n// Calling add with [2, 4]\nmath.add(2, 4);\n再完善点：\nlet log = (type) => {\n  return (target, name, descriptor) => {\n    const method = descriptor.value;\n    descriptor.value =  (...args) => {\n      console.info(`(${type}) 正在执行: ${name}(${args}) = ?`);\n      let ret;\n      try {\n        ret = method.apply(target, args);\n        console.info(`(${type}) 成功 : ${name}(${args}) => ${ret}`);\n      } catch (error) {\n        console.error(`(${type}) 失败: ${name}(${args}) => ${error}`);\n      }\n      return ret;\n    }\n  }\n};\n")])])]),t("h3",{attrs:{id:"autobind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autobind","aria-hidden":"true"}},[n._v("#")]),n._v(" autobind")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Person {\n  @autobind\n  getPerson() {\n  \treturn this;\n  }\n}\n\nlet person = new Person();\nlet { getPerson } = person;\n\ngetPerson() === person;\n// true\n")])])]),t("blockquote",[t("blockquote",[t("p",[n._v("我们很容易想到的一个场景是 React 绑定事件的时候：")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Toggle extends React.Component {\n\n  @autobind\n  handleClick() {\n\t  console.log(this)\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        button\n      </button>\n    );\n  }\n}\n")])])]),t("blockquote",[t("blockquote",[t("p",[n._v("我们来写这样一个 autobind 函数：")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const { defineProperty, getPrototypeOf} = Object;\n\nfunction bind(fn, context) {\n  if (fn.bind) {\n    return fn.bind(context);\n  } else {\n    return function __autobind__() {\n      return fn.apply(context, arguments);\n    };\n  }\n}\n\nfunction createDefaultSetter(key) {\n  return function set(newValue) {\n    Object.defineProperty(this, key, {\n      configurable: true,\n      writable: true,\n      enumerable: true,\n      value: newValue\n    });\n\n    return newValue;\n  };\n}\n\nfunction autobind(target, key, { value: fn, configurable, enumerable }) {\n  if (typeof fn !== 'function') {\n    throw new SyntaxError(`@autobind can only be used on functions, not: ${fn}`);\n  }\n\n  const { constructor } = target;\n\n  return {\n    configurable,\n    enumerable,\n\n    get() {\n\n      /**\n       * 使用这种方式相当于替换了这个函数，所以当比如\n       * Class.prototype.hasOwnProperty(key) 的时候，为了正确返回\n       * 所以这里做了 this 的判断\n       */\n      if (this === target) {\n        return fn;\n      }\n\n      const boundFn = bind(fn, this);\n\n      defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        enumerable: false,\n        value: boundFn\n      });\n\n      return boundFn;\n    },\n    set: createDefaultSetter(key)\n  };\n}\n")])])]),t("h3",{attrs:{id:"debounce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#debounce","aria-hidden":"true"}},[n._v("#")]),n._v(" debounce")]),n._v(" "),t("blockquote",[t("p",[n._v("有的时候，我们需要对执行的方法进行防抖处理:")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Toggle extends React.Component {\n\n  @debounce(500, true)\n  handleClick() {\n    console.log('toggle')\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        button\n      </button>\n    );\n  }\n}\n")])])]),t("blockquote",[t("p",[n._v("我们来实现一下：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function _debounce(func, wait, immediate) {\n\n    var timeout;\n\n    return function () {\n        var context = this;\n        var args = arguments;\n\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            var callNow = !timeout;\n            timeout = setTimeout(function(){\n                timeout = null;\n            }, wait)\n            if (callNow) func.apply(context, args)\n        }\n        else {\n            timeout = setTimeout(function(){\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n\nfunction debounce(wait, immediate) {\n  return function handleDescriptor(target, key, descriptor) {\n    const callback = descriptor.value;\n\n    if (typeof callback !== 'function') {\n      throw new SyntaxError('Only functions can be debounced');\n    }\n\n    var fn = _debounce(callback, wait, immediate)\n\n    return {\n      ...descriptor,\n      value() {\n        fn()\n      }\n    };\n  }\n}\n")])])]),t("h2",{attrs:{id:"mixin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mixin","aria-hidden":"true"}},[n._v("#")]),n._v(" mixin")]),n._v(" "),t("blockquote",[t("p",[n._v("用于将对象的方法混入 Class 中：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const SingerMixin = {\n  sing(sound) {\n    console.log(sound);\n  }\n};\n\nconst FlyMixin = {\n  // All types of property descriptors are supported\n  get speed() {},\n  fly() {},\n  land() {}\n};\n\n@mixin(SingerMixin, FlyMixin)\nclass Bird {\n  singMatingCall() {\n    this.sing('tweet tweet');\n  }\n}\n\nvar bird = new Bird();\nbird.singMatingCall();\n// alerts \"tweet tweet\"\nfunction mixin(...mixins) {\n  // return target => {\n  return function (target) {\n    if (!mixins.length) {\n      throw new SyntaxError(`@mixin() class ${target.name} requires at least one mixin as an argument`);\n    }\n    // let a = Object.getOwnPropertyDescriptors(mixins[1])\n    // {\n    //   sing: {\n    //     configurable: true,\n    //     enumerable: true,\n    //     value: fn,\n    //     writable: true\n    //   }\n    // }\n    // console.log(Object.getOwnPropertyNames(a))\n    // ['sing']\n    for (let i = 0, l = mixins.length; i < l; i++) {\n      const descs = Object.getOwnPropertyDescriptors(mixins[i]);\n      const keys = Object.getOwnPropertyNames(descs);\n\n      for (let j = 0, k = keys.length; j < k; j++) {\n        const key = keys[j];\n\n        if (!target.prototype.hasOwnProperty(key)) {\n          Object.defineProperty(target.prototype, key, descs[key]);\n        }\n      }\n    }\n  };\n}\n")])])]),t("h2",{attrs:{id:"redux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redux","aria-hidden":"true"}},[n._v("#")]),n._v(" redux")]),n._v(" "),t("blockquote",[t("p",[n._v("实际开发中，React 与 Redux 库结合使用时，常常需要写成下面这样。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class MyReactComponent extends React.Component {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);\n有了装饰器，就可以改写上面的代码。\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyReactComponent extends React.Component {};\n复制代码相对来说，后一种写法看上去更容易理解。\n")])])]),t("h2",{attrs:{id:"注意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意","aria-hidden":"true"}},[n._v("#")]),n._v(" 注意")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("以上我们都是用于修饰类方法，我们获取值的方式为：\nconst method = descriptor.value;\n但是如果我们修饰的是类的实例属性，因为 Babel 的缘故，通过 value 属性并不能获取值，我们可以写成：\nconst value = descriptor.initializer && descriptor.initializer();\n")])])]),t("h2",{attrs:{id:"loading"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loading","aria-hidden":"true"}},[n._v("#")]),n._v(" loading")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("@loadingWrap(true)\nasync handleSelect(params) {\n  await this.props.dispatch({\n    type: 'product_list/setQuerypParams',\n    querypParams: params\n  });\n}\n")])])]),t("blockquote",[t("p",[n._v("loadingWrap")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('export function loadingWrap(needHide) {\n\n  const defaultLoading = (\n    <div className="toast-loading">\n      <Loading className="loading-icon"/>\n      <div>加载中...</div>\n    </div>\n  );\n\n  return function (target, property, descriptor) {\n    const raw = descriptor.value;\n    \n    descriptor.value = function (...args) {\n      Toast.info(text || defaultLoading, 0, null, true);\n      const res = raw.apply(this, args);\n      \n      if (needHide) {\n        if (get(\'finally\')(res)) {\n          res.finally(() => {\n            Toast.hide();\n          });\n        } else {\n          Toast.hide();\n        }\n      }\n    };\n    return descriptor;\n  };\n}\n')])])])])},[],!1,null,null,null);e.default=r.exports}}]);