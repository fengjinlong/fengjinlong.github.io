(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{153:function(n,e,t){"use strict";t.r(e);var a=t(0),r=Object(a.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"什么是函数式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是函数式编程","aria-hidden":"true"}},[n._v("#")]),n._v(" 什么是函数式编程")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("函数式编程主要是范畴论数学中的一个分支，它认为所有的概念体系都可以抽象成一个个范畴，属于结构化编程的一种。运算过程尽量写成一系列嵌套的函数调用")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//  函数式编程\nvar result = subtract(multiply(add(1,2), 3), 4);\n\n// 过程编程\nvar a = add(1,2);\nvar b = multiply(a, 3);\nvar c = subtract(b, 4);\n")])])]),t("h2",{attrs:{id:"为什么学习函数式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么学习函数式编程","aria-hidden":"true"}},[n._v("#")]),n._v(" 为什么学习函数式编程")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("其实个人觉的学习函数式编程就是为了更好的模块化，使其看起来更简洁。这也是范式编程和结构化编程的主要思想")])])]),n._v(" "),t("h2",{attrs:{id:"函数式编程特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程特点","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数式编程特点")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v('函数是"第一等公民"')]),n._v(" "),t("li",[n._v("只用表达式，不用语句")]),n._v(" "),t("li",[n._v("没有副作用（函数要保持独立，所有功能就是返回一个新的值，没有其他行为，更不能修改外部状态的值）")]),n._v(" "),t("li",[n._v("不修改状态（可以使用参数来保存状态，不可以使用变量来保存状态）")]),n._v(" "),t("li",[n._v("引用透明（函数运行只靠参数）")])])]),n._v(" "),t("h2",{attrs:{id:"函数式编程的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程的优点","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数式编程的优点")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("代码更简洁，易于理解，维护更方便")]),n._v(" "),t("li",[n._v("易于并发编程（由于不修改变量所以不存在锁线程的问题）")]),n._v(" "),t("li",[n._v("代码的热升级")])])]),n._v(" "),t("h2",{attrs:{id:"函数式编程-纯函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程-纯函数","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数式编程-纯函数")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("说纯函数概念之前我们再来复习一下什么是函数")]),n._v(" "),t("li",[n._v("函数是一个方法，有一些输入，称为变量，并产生一些输出称为返回值")])])]),n._v(" "),t("h2",{attrs:{id:"函数可以用于以下目的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数可以用于以下目的","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数可以用于以下目的")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("映射：根据给定的输入生成一些输出，函数将输入值映射到输出值上")]),n._v(" "),t("li",[n._v("过程：调用函数按照一系列的步骤来执行。这就是我们说的过程编程")]),n._v(" "),t("li",[n._v("I/O：与系统其他部分通信的功能。如存储系统日志，网络等")]),n._v(" "),t("li",[n._v("纯函数都是关于映射的所以对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态。")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 纯函数\nconst double = x => x * 2;\nconsole.log（double（5））\n\n// 不纯\nlet val = 2;\nconst double = x => x * val;\nconsole.log（double（5））\n\n// 不纯\nMath.random()\nMath.random()\n")])])]),t("h2",{attrs:{id:"函数式编程-纯函数-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程-纯函数-2","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数式编程-纯函数")]),n._v(" "),t("h2",{attrs:{id:"纯函数的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#纯函数的优点","aria-hidden":"true"}},[n._v("#")]),n._v(" 纯函数的优点")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("独立于外部状态，所以不会受外部全局环境的影响而产生的错误或者副作用")]),n._v(" "),t("li",[n._v("由于其独立，所以易于重构和重组和重用，使程序更加灵活")])])]),n._v(" "),t("h2",{attrs:{id:"函数式编程-幂等性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程-幂等性","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数式编程-幂等性")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("执行多次所产生的影响均与一次执行的影响相同，也就是说执行一次和执行多次对系统内部的状态影响是一样的")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Person {\n  constructor () {\n    this.name = name;\n  },\n  sayName () {\n    console.log(my name is + this.name);\n  } \n}\nvar person = new Person(zhangsan)\nperson.sayName();\nperson.sayName();\n")])])]),t("h2",{attrs:{id:"纯函数和幂等性的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#纯函数和幂等性的区别","aria-hidden":"true"}},[n._v("#")]),n._v(" 纯函数和幂等性的区别")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("法调用多次对内部的状态影响是一样的，则这么方法就具有幂等性，在函数式编程中，纯函数也具有幂等性，但具有幂等性的函数却不一定是纯函数。")]),n._v(" "),t("li",[n._v("纯函数主要强调相同的输入，多次调用，输出也相同且无副作用，而幂等主要强调多次调用，对内部的状态的影响是一样的，调用返回值可能不同。函数式编程-偏应用函数、函数的柯里化")])])]),n._v(" "),t("h2",{attrs:{id:"偏应用函数简称偏函数，在模拟-bind-的时候已经说明其概念和作为主要-bind-的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#偏应用函数简称偏函数，在模拟-bind-的时候已经说明其概念和作为主要-bind-的实现","aria-hidden":"true"}},[n._v("#")]),n._v(" 偏应用函数简称偏函数，在模拟 bind 的时候已经说明其概念和作为主要 bind 的实现")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("函数柯里化主要是通过偏应用函数的实现，把接受多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 柯里化之前\nfunction add (a, b) {\n  return a + b;\n}\n\n// 柯里化之后\nfunction add (a) {\n  return function (b) {\n    return a+b\n  }\n}\n\n// 等同于\nconst add = a => b => a + b;\nconst result = add(2)(3); // => 5\n首先函数接受 a 参数 然后返回一个新的匿名函数体确定了新的词法作用域,在该词法作用域中也拥有 a 参数\n该匿名函数调用传入参数 3 返回 a+b 的和\n通过上面程序了解到柯里化函数的特点是总是返回一个一元的函数：一个带有一个参数的新函数，不同的是普通函数可以根据需要一次获取尽可能多的参数\n\n")])])]),t("h2",{attrs:{id:"为什么要柯里化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要柯里化","aria-hidden":"true"}},[n._v("#")]),n._v(" 为什么要柯里化")]),n._v(" "),t("blockquote",[t("ul",[t("li",[n._v("柯里化在函数组合的上下文中起到关键的作用,能够让你重新组合你的应用，将复杂的功能拆分成一个个简单的部分，这样容易更改，理解")]),n._v(" "),t("li",[n._v("柯里化也是一种函数预加载的方法，通过传递较少的参数得到一个在相同词法作用域当中缓存了这些参数的新函数，其实这也是一种对参数的缓存")]),n._v(" "),t("li",[n._v("如何柯里化")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 普通\nconst sayName = name => age => `my name is ${name}, Im years old ${age}` ;\nlet name = sayName('zhangsan');\nlet age = name(27);\n\n// 利用bind\n\nfunction person (name, age, height) {\n  console.log(`my name is ${name}, I,m years old ${age}, my height is ${height} meters`)\n}\nlet info = person.bind(null, 'zhangsan');\nconsole.log(info(27, 175));\n柯里化函数的应用场景\n延迟计算\n参数复用\n动态创建函数\n延迟计算\n\n\n// 普通实现\nvar sum = function(args){\n  return args.reduce(function(a,b){\n      return a+b\n  });\n};\nvar result = sum([1,2,3,4,5]); // 15\n\n// 柯里化实现\nfunction add() {\n  var _args = [].slice.call(arguments);\n  var adder = function () {\n\n      // 利用闭包特性保存_args的值\n      var _adder = function() {\n          [].push.apply(_args, [].slice.call(arguments));\n          return _adder;\n      };\n\n      // 利用隐式转换的特性，计算最终的值返回\n      _adder.toString = function () {\n          return _args.reduce(function (a, b) {\n              return a + b;\n          });\n      }\n\n      return _adder;\n  }\n  return adder.apply(null, [].slice.call(arguments));\n}\n\nvar sum = add();\nsum(1,2,3)(4);\nsum(5);\nsum() // 15\n\n优点：调用灵活，参数定义随意\n\n充分利用了柯里化提延迟执行的特点\n延迟执行 – 返回新函数可以进行任意调用\nDOM操作中的事件绑定(动态创建函数)\n当在多次调用同一个函数，并且传递的参数绝大多数是相同的。\n\n// 普通版本\nvar addEvent = function(el, type, fn, capture) {\n    if (window.addEventListener) {\n      el.addEventListener(type, function(e) {\n        fn.call(el, e);\n      }, capture);\n    } else if (window.attachEvent) {\n      el.attachEvent(\"on\" + type, function(e) {\n        fn.call(el, e);\n      });\n    } \n };\n\n // 柯里化版本\n var addEvent = (function(){\n    if (window.addEventListener) {\n      return function(el, type, fn, capture) {\n        el.addEventListener(type, function(e) {\n          fn.call(el, e);\n        }, (capture));\n      };\n    } else if (window.attachEvent) {\n      return function(el, type, fn, capture) {\n        el.attachEvent(\"on\" + type, function(e) {\n            fn.call(el, e);\n        });\n      };\n    }\n})();\n\n优点：不用每次调用进行 if () {}else {} 判断兼容性问题\n")])])]),t("p",[n._v("充分利用了柯里化提前返回和延迟执行的特点\n提前返回 – 使用函数立即调用进行了一次兼容判断（部分求值），返回兼容的事件绑定方法\n延迟执行 – 返回新函数，在新函数调用兼容的事件方法。等待addEvent新函数调用，延迟执行\n当然应用场景还有很多，比如我们经常提到的防抖和节流问题，充分的利用了函数式编程的延迟执行特性，将多个间隔接近的函数执行合并成一次函数执行来提高性能问题。\n关于事件节流和防抖动将会在后续的专题中单独指出")]),n._v(" "),t("h2",{attrs:{id:"函数式编程-函数组合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程-函数组合","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数式编程-函数组合")]),n._v(" "),t("p",[n._v("\\函数组合是将两个或多个函数组合以产生新函数的过程。将功能组合在一起就像将一系列管道拼凑在一起，以便我们的数据流过")]),n._v(" "),t("p",[n._v("简而言之，函数 f和 g的组合可以定义为f（g（x）），它从内到外 - 从右到左进行求值")]),n._v(" "),t("p",[n._v("举例子，想象一个场景，想要将用户的全名转换为URL slugs，以便为每个用户提供个人资料页面。为此，需要完成一系列步骤：")]),n._v(" "),t("ol",[t("li",[n._v("将名称拆分为空格中的数组")]),n._v(" "),t("li",[n._v("将名称映射到小写")]),n._v(" "),t("li",[n._v("加入破折号")]),n._v(" "),t("li",[n._v("编码URI组件")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// toslug.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  input.split(' ')\n    .map(str => str.toLowerCase())\n    .join('-')\n);\n")])])]),t("p",[n._v("不错......但如果我告诉你它可能更具可读性呢？想象一下，这些操作中的每一个都具有相应的可组合功能。可以写成")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  join('-')(\n    map(toLowerCase)(\n      split(' ')(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n")])])]),t("p",[n._v("这看起来比我们的第一次尝试更难阅读，但先放在这，我们继续以可组合形式的常用实用程序，如split（），join（）和map（）。来实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// composables.js hosted with ❤ by GitHub\n\nconst curry = fn => (...args) => fn.bind(null, ...args);\n\nconst map = curry((fn, arr) => arr.map(fn));\n\nconst join = curry((str, arr) => arr.join(str));\n\nconst toLowerCase = str => str.toLowerCase();\n\nconst split = curry((splitOn, str) => str.split(splitOn));\n")])])]),t("p",[n._v("上面的例子在技术上并不是真的柯里化，它总能产生一元函数，但是它是一个简单的偏应用函数。请参考有关偏应用函数和柯里化的区别")]),n._v(" "),t("p",[n._v("回到我们的toSlug（）实现")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// nesting-composition.js hosted with ❤ by GitHub\n\nconst toSlug = input => encodeURIComponent(\n  join('-')(\n    map(toLowerCase)(\n      split(' ')(\n        input\n      )\n    )\n  )\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n")])])]),t("p",[n._v("我们可以使用一个自动组合这些函数的函数来展平嵌套，这意味着它将从一个函数获取输出并自动将其到下一个函数的输入，直到它输出最终值\n想象一下我们实现函数 reduce（） 的功能，但为了匹配上面的compose行为，我们需要它从右到左，而不是从左到右")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// compose.js hosted with ❤ by GitHub\n\nconst compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);\n")])])]),t("p",[n._v("上面的 .reduceRight() 与.reduce（）一样，数组.reduceRight（）方法采用reducer函数和初始值（x）。我们迭代数组函数（从右到左），依次将每个函数应用于累加值（v）")]),n._v(" "),t("p",[n._v("使用compose，我们可以在没有嵌套的情况下重写 toSlug 的组合")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// using-compose.js hosted with ❤ by GitHub\nconst toSlug = compose(\n  encodeURIComponent,\n  join('-'),\n  map(toLowerCase),\n  split(' ')\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n还有另一种通常称为“pipe（）”的形式。 Lodash称之为flow（）\n\n// pipe.js hosted with ❤ by GitHub\n\nconst pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);\n\nconst fn1 = s => s.toLowerCase();\nconst fn2 = s => s.split('').reverse().join('');\nconst fn3 = s => s + '!'\n\nconst newFunc = pipe(fn1, fn2, fn3);\nconst result = newFunc('Time'); // emit!\n我们看看用pipe（）实现的toSlug（）函数\n\n// using-pipe.js hosted with ❤ by GitHub\n\nconst toSlug = pipe(\n  split(' '),\n  map(toLowerCase),\n  join('-'),\n  encodeURIComponent\n);\n\nconsole.log(toSlug('JS Cheerleader')); // 'js-cheerleader'\n在命令式编程中，当您对某个变量执行转换时，您将在转换的每个步骤中找到对该变量的引用。上面的pipe（）实现是以无点的方式编写的，这意味着它根本不识别它运行的参数。\n\n我经常在单元测试和Redux状态之类的东西中使用管道来消除对中间变量的需要，这些中间变量只存在于一个操作和下一个操作之间的瞬态值。\n\n// using-trace.js hosted with ❤ by GitHub\n\nconst trace = curry((label, x) => {\n  console.log(`== ${ label }:  ${ x }`);\n  return x;\n});\n\nconst toSlug = pipe(\n  trace('input'),\n  split(' '),\n  map(toLowerCase),\n  trace('after map'),\n  join('-'),\n  encodeURIComponent\n);\n\nconsole.log(toSlug('JS Cheerleader'));\n// '== input:  JS Cheerleader'\n// '== after map:  js,cheerleader'\n// 'js-cheerleader'\ntrace（）只是更通用的tap（）的一种特殊形式，它允许你为流经管道的每个值执行一些操作\n\n// tap.js hosted with ❤ by GitHub\n\nconst tap = curry((fn, x) => {\n  fn(x);\n  return x;\n});\n现在可以看到trace（）是一个特殊的tap（）\n\nconst trace = label => {\n  return tap(x => console.log(`== ${ label }:  ${ x }`));\n};\n这样我们就大概了解到函数式编程的函数组合模式，在后续的文章中会有更多关于函数式编程介绍\n")])])]),t("h2",{attrs:{id:"函数式编程-point-free"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程-point-free","aria-hidden":"true"}},[n._v("#")]),n._v(" 函数式编程-Point Free")]),n._v(" "),t("p",[n._v("Point-free 是一种编程风格，其中函数定义不引用函数的参数。不用关心将要操作的数据是什样的。我们来看看 JavaScript 中的函数定义：")]),n._v(" "),t("p",[n._v("// 表达式\nfunction foo (/* parameters are declared here*/) {}")]),n._v(" "),t("p",[n._v("// 声明式\nconst foo = (/* parameters are declared here "),t("em",[n._v("/) => // ...\nconst foo = function (/")]),n._v(" parameters are declared here */) {}\n如何在不引用所需参数的情况下在 JavaScript 中定义函数？我们不能使用 functionkeyword，也不能使用箭头函数（=>），因为它们需要声明形参（这将引用它的参数）。所以我们需要做的是调用一个返回函数的函数")]),n._v(" "),t("p",[n._v("看一个简单的例子：")]),n._v(" "),t("p",[n._v("// 非 Point-free. 因为函数引用了参数name\nvar greet = function(name) {\nreturn ('hello ' + name).toUpperCase();\n}")]),n._v(" "),t("p",[n._v("// Point-free 先定义基本的函数，不用关心中间变量str是什么，抽象基本结构\nvar toUpperCase = str => str.toUpperCase();\nvar hello = str => "),t("code",[n._v("hello ${str}")]),n._v(";")]),n._v(" "),t("p",[n._v("var greet = compose(hello, toUpperCase);\ngreet('renbo');\n在看一个例子：\n这个例子来自于Favoring Curry\n假设我们从服务器获取这样的数据：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var data = {\n  result: "SUCCESS",\n  tasks: [\n    {id: 104, complete: false,            priority: "high",\n              dueDate: "2013-11-29",      username: "Scott",\n              title: "Do something",      created: "9/22/2013"},\n    {id: 105, complete: false,            priority: "medium",\n              dueDate: "2013-11-22",      username: "Lena",\n              title: "Do something else", created: "9/22/2013"},\n    {id: 107, complete: true,             priority: "high",\n              dueDate: "2013-11-22",      username: "Mike",\n              title: "Fix the foo",       created: "9/22/2013"},\n    {id: 108, complete: false,            priority: "low",\n              dueDate: "2013-11-15",      username: "Punam",\n              title: "Adjust the bar",    created: "9/25/2013"},\n    {id: 110, complete: false,            priority: "medium",\n              dueDate: "2013-11-15",      username: "Scott",\n              title: "Rename everything", created: "10/2/2013"},\n    {id: 112, complete: true,             priority: "high",\n              dueDate: "2013-11-27",      username: "Lena",\n              title: "Alter all quuxes",  created: "10/5/2013"}\n  ]\n};\n')])])]),t("p",[n._v("我们需要一个名为 getIncompleteTaskSummaries 的函数，接收一个 username 作为参数，从服务器获取数据之后筛选出这个用户未完成的任务的 ids、priorities、titles、和 dueDate 数据，并且按照日期升序排序。")]),n._v(" "),t("p",[n._v("以 Scott 为例，最终筛选出的数据为")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('[\n    {id: 110, title: "Rename everything", \n        dueDate: "2013-11-15", priority: "medium"},\n    {id: 104, title: "Do something", \n        dueDate: "2013-11-29", priority: "high"}\n]\n')])])]),t("p",[n._v("下面得代码我们应该很熟悉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var getIncompleteTaskSummaries = function(membername) {\n     return fetchData()\n         .then(function(data) {\n             return data.tasks;\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return task.username == membername\n             })\n         })\n         .then(function(tasks) {\n             return tasks.filter(function(task) {\n                 return !task.complete\n             })\n         })\n         .then(function(tasks) {\n             return tasks.map(function(task) {\n                 return {\n                     id: task.id,\n                     dueDate: task.dueDate,\n                     title: task.title,\n                     priority: task.priority\n                 }\n             })\n         })\n         .then(function(tasks) {\n             return tasks.sort(function(first, second) {\n                 var a = first.dueDate,\n                     b = second.dueDate;\n                 return a < b ? -1 : a > b ? 1 : 0;\n             });\n         })\n         .then(function(task) {\n             console.log(task)\n         })\n};\n")])])]),t("p",[n._v("getIncompleteTaskSummaries('Scott')\n使用 Point-free 模式\n// 拆分基础函数\ncurry 为封装的通用 curry 韩式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var prop = curry(function(name, obj) {\n    return obj[name];\n});\n\nvar propEq = curry(function(name, val, obj) {\n    return obj[name] === val;\n});\n\nvar filter = curry(function(fn, arr) {\n    return arr.filter(fn)\n});\n\nvar map = curry(function(fn, arr) {\n    return arr.map(fn)\n});\n\nvar pick = curry(function(args, obj){\n    var result = {};\n    for (var i = 0; i < args.length; i++) {\n        result[args[i]] = obj[args[i]]\n    }\n    return result;\n});\n\nvar sortBy = curry(function(fn, arr) {\n    return arr.sort(function(a, b){\n        var a = fn(a),\n            b = fn(b);\n        return a < b ? -1 : a > b ? 1 : 0;\n    })\n});\n")])])]),t("p",[n._v("// 拼装")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(prop('tasks'))\n        .then(filter(propEq('username', membername)))\n        .then(filter(propEq('complete', false)))\n        .then(map(pick(['id', 'dueDate', 'title', 'priority'])))\n        .then(sortBy(prop('dueDate')))\n};\n")])])]),t("p",[n._v("getIncompleteTaskSummaries('Scott')\n如果直接使用 ramda.js，你可以省去编写基本函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.prop('tasks'))\n        .then(R.filter(R.propEq('username', membername)))\n        .then(R.filter(R.propEq('complete', false)))\n        .then(R.map(R.pick(['id', 'dueDate', 'title', 'priority'])))\n        .then(R.sortBy(R.prop('dueDate')))\n};\n\ngetIncompleteTaskSummaries('Scott')\n利用 compose，也可以这样写,但是 compose 是从右到左依次执行的\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n        .then(R.compose(\n            R.sortBy(R.prop('dueDate')),\n            R.map(R.pick(['id', 'dueDate', 'title', 'priority'])),\n            R.filter(R.propEq('complete', false)),\n            R.filter(R.propEq('username', membername)),\n            R.prop('tasks')\n        ))\n};\n\ngetIncompleteTaskSummaries('Scott')\n我们也可以利用 ramda.js 提供的 R.pipe 函数，可以从左到右\nvar getIncompleteTaskSummaries = function(membername) {\n    return fetchData()\n      .then(R.pipe(\n          R.prop('tasks'),\n          R.filter(R.propEq('username', membername)),\n          R.filter(R.propEq('complete', false)),\n          R.map(R.pick(['id', 'dueDate', 'title', 'priority']),\n          R.sortBy(R.prop('dueDate'))\n      ))\n};\n")])])]),t("p",[n._v("Point Free 风格能够帮助我们减少不必要的命名，让代码保持简洁和通用")]),n._v(" "),t("h2",{attrs:{id:"函子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函子","aria-hidden":"true"}},[n._v("#")]),n._v(" 函子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Functor {\n  constructor(val){\n    this.val = val\n  }\n  map(f){\n    return new Functor(f(this.val))\n  }\n  static of(val){\n    return new Functor(val)\n  }\n}\n\nconst functor1 = Functor.of(2).map(two => two + 2)\nconst functor2 = Functor.of('plus').map(name => name.toUpperCase())\n\n// console.log(functor2)\n\n//const err = Functor.of(null).map(err => err.toUpperCase())\n\n// Maybe选择执行逻辑 可用于处理error\n\nclass Maybe extends Functor {\n  map(f){\n    return this.val ? Maybe.of(f(this.val)) : Maybe.of(this.val)\n  }\n  static of(val){\n    return new Maybe(val)\n  }\n}\n\nconst mb = Maybe.of(2).map(x => x * 100)\n// console.log(mb)\n// const err = Maybe.of(null).map(err => err.toUpperCase())\n\n\n// Either 如果存在right值  对right值进行关系处理 否则对left值进行关系处理\nclass Either extends Functor {\n  constructor(left,right){\n    super('val')\n    this.left = left\n    this.right = right\n  }\n  map(f){\n    return this.right ? Either.of(this.left,f(this.right)) : Either.of(f(this.left),this.right)\n  }\n  static of (left, right) {\n    return new Either(left, right)\n  }\n}\n\nconst edit = Either.of(1,0).map(x => x + 8)\n\n// console.log(edit)\n\n// class Ap extends Functor{\n//   ap(F){\n//     return Ap.of(this.val(F.val))\n//   }\n//   static of(val){\n//     return new Ap(val)\n//   }\n// }\n// const addTwo = x => x + 2\n// const add = x => y => x + y\n\n// const res3 = Ap.of(addTwo).ap(Functor.of(2))\n// const res6 = Ap.of(add).ap(Maybe.of(2)).ap(Maybe.of(3))\n//  console.log(res6)\n\n//  七、ap 函子\n// 函子里面包含的值，完全可能是函数。我们可以想象这样一种情况，一个函子的值是数值，另一个函子的值是函数。\n\n\nfunction addTwo(x) {\n  return x + 2;\n}\n\nconst A = Functor.of(2);\nconst B = Functor.of(addTwo)\n// 上面代码中，函子A内部的值是2，函子B内部的值是函数addTwo。\n// 有时，我们想让函子B内部的函数，可以使用函子A内部的值进行运算。这时就需要用到 ap 函子。\n// ap 是 applicative（应用）的缩写。凡是部署了ap方法的函子，就是 ap 函子。\nclass Ap extends Functor {\n  ap(F) {\n    return Ap.of(this.val(F.val));\n  }\n}\n// 注意，ap方法的参数不是函数，而是另一个函子。\n// 因此，前面例子可以写成下面的形式。\nAp.of(addTwo).ap(Functor.of(2))\n// Ap(4)\n// ap 函子的意义在于，对于那些多参数的函数，就可以从多个容器之中取值，实现函子的链式操作。\nfunction add(x) {\n  return function (y) {\n    return x + y;\n  };\n}\nAp.of(add).ap(Maybe.of(2)).ap(Maybe.of(3));\n// Ap(5)\n// 上面代码中，函数add是柯里化以后的形式，一共需要两个参数。通过 ap 函子，我们就可以实现从两个容器之中取值。它还有另外一种写法。\n\nAp.of(add(2)).ap(Maybe.of(3));\n")])])]),t("h2",{attrs:{id:"应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[n._v("#")]),n._v(" 应用")]),n._v(" "),t("p",[n._v("// https://lambda.academy/explain-monads/")]),n._v(" "),t("p",[n._v("// https://lambda.academy/")]),n._v(" "),t("p",[n._v("// http://www.ruanyifeng.com/blog/2015/07/monad.html")]),n._v(" "),t("p",[n._v("// 任何具有map方法的数据结构，都可以当作函子的实现。\n// 一般约定，函子的标志就是容器具有map方法。该方法将容器里面的每一个值，映射到另一个容器。\n// 函数式编程一般约定，函子有一个of方法，用来生成新的容器。\n// Maybe 函子就是为了解决这一类问题而设计的。简单说，它的map方法里面设置了空值检查\n// 条件运算if...else是最常见的运算之一，函数式编程里面，使用 Either 函子表达。\n// Either 函子内部有两个值：左值（Left）和右值（Right）。右值是正常情况下使用的值，左值是右值不存在时使用的默认值。")]),n._v(" "),t("p",[n._v("// ap 函子\n// 函子里面包含的值，完全可能是函数。我们可以想象这样一种情况，一个函子的值是数值，另一个函子的值是函数\nfunction addTwo(x) {\nreturn x + 2;\n}\nconst A = Functor.of(2);\nconst B = Functor.of(addTwo)\n// 上面代码中，函子A内部的值是2，函子B内部的值是函数addTwo。\n// 有时，我们想让函子B内部的函数，可以使用函子A内部的值进行运算。这时就需要用到 ap 函子。\n// ap 是 applicative（应用）的缩写。凡是部署了ap方法的函子，就是 ap 函子。\nclass Ap extends Functor {\nap(F) {\nreturn Ap.of(this.val(F.val));\n}\n}\n// ap方法的参数不是函数，而是另一个函子。")]),n._v(" "),t("p",[n._v("Ap.of(addTwo).ap(Functor.of(2))\n// Ap(4)\n// ap 函子的意义在于，对于那些多参数的函数，就可以从多个容器之中取值，实现函子的链式操作。\nfunction add(x) {\nreturn function (y) {\nreturn x + y;\n};\n}")]),n._v(" "),t("p",[n._v("Ap.of(add).ap(Maybe.of(2)).ap(Maybe.of(3));\n// Ap(5)\n// 上面代码中，函数add是柯里化以后的形式，一共需要两个参数。通过 ap 函子，我们就可以实现从两个容器之中取值。它还有另外一种写法\nAp.of(add(2)).ap(Maybe.of(3));")]),n._v(" "),t("p",[n._v("// Monad 函子\n// 函子是一个容器，可以包含任何值。函子之中再包含一个函子，也是完全合法的。但是，这样就会出现多层嵌套的函子。\nMaybe.of(\nMaybe.of(\nMaybe.of({name: 'Mulburry', number: 8402})\n)\n)\n// 上面这个函子，一共有三个Maybe嵌套。如果要取出内部的值，就要连续取三次this.val。这当然很不方便，因此就出现了 Monad 函子\n// Monad 函子的作用是，总是返回一个单层的函子。它有一个flatMap方法，与map方法作用相同，唯一的区别是如果生成了一个嵌套函子，它会取出后者内部的值，保证返回的永远是一个单层的容器，不会出现嵌套的情况")]),n._v(" "),t("p",[n._v("class Monad extends Functor {\njoin() {\nreturn this.val;\n}\nflatMap(f) {\nreturn this.map(f).join();\n}\n}")]),n._v(" "),t("p",[n._v("// 上面代码中，如果函数f返回的是一个函子，那么this.map(f)就会生成一个嵌套的函子。所以，join方法保证了flatMap方法总是返回一个单层的函子。这意味着嵌套的函子会被铺平（flatten）。")]),n._v(" "),t("p",[n._v("// IO 操作\n// Monad 函子的重要应用，就是实现 I/O （输入输出）操作。")]),n._v(" "),t("p",[n._v("// I/O 是不纯的操作，普通的函数式编程没法做，这时就需要把 IO 操作写成Monad函子，通过它来完成。")]),n._v(" "),t("p",[n._v("var fs = require('fs');")]),n._v(" "),t("p",[n._v("var readFile = function(filename) {\nreturn new IO(function() {\nreturn fs.readFileSync(filename, 'utf-8');\n});\n};")]),n._v(" "),t("p",[n._v("var print = function(x) {\nreturn new IO(function() {\nconsole.log(x);\nreturn x;\n});\n}")]),n._v(" "),t("p",[n._v("// 上面代码中，读取文件和打印本身都是不纯的操作，但是readFile和print却是纯函数，因为它们总是返回 IO 函子。")]),n._v(" "),t("p",[n._v("// 如果 IO 函子是一个Monad，具有flatMap方法，那么我们就可以像下面这样调用这两个函数。\nreadFile('./user.txt')\n.flatMap(print)")]),n._v(" "),t("p",[n._v("// 这就是神奇的地方，上面的代码完成了不纯的操作，但是因为flatMap返回的还是一个 IO 函子，所以这个表达式是纯的。我们通过一个纯的表达式，完成带有副作用的操作，这就是 Monad 的作用。")]),n._v(" "),t("p",[n._v("// 由于返回还是 IO 函子，所以可以实现链式操作。因此，在大多数库里面，flatMap方法被改名成chain")]),n._v(" "),t("p",[n._v("var tail = function(x) {\nreturn new IO(function() {\nreturn x[x.length - 1];\n});\n}")]),n._v(" "),t("p",[n._v("readFile('./user.txt')\n.flatMap(tail)\n.flatMap(print)")]),n._v(" "),t("p",[n._v("// 等同于\nreadFile('./user.txt')\n.chain(tail)\n.chain(print)\n// 上面代码读取了文件user.txt，然后选取最后一行输出。")]),n._v(" "),t("p",[n._v("class Functor {\nconstructor(val){\nthis.val = val\n}\nmap(f){\nreturn new Functor(f(this.val))\n}\nstatic of(val){\nreturn new Functor(val)\n}\n}")]),n._v(" "),t("p",[n._v("const functor1 = Functor.of(2).map(two => two + 2)\nconst functor2 = Functor.of('plus').map(name => name.toUpperCase())")]),n._v(" "),t("p",[n._v("// console.log(functor2)")]),n._v(" "),t("p",[n._v("//const err = Functor.of(null).map(err => err.toUpperCase())")]),n._v(" "),t("p",[n._v("// Maybe选择执行逻辑 可用于处理error")]),n._v(" "),t("p",[n._v("class Maybe extends Functor {\nmap(f){\nreturn this.val ? Maybe.of(f(this.val)) : Maybe.of(this.val)\n}\nstatic of(val){\nreturn new Maybe(val)\n}\n}")]),n._v(" "),t("p",[n._v("const mb = Maybe.of(2).map(x => x * 100)\n// console.log(mb)\n// const err = Maybe.of(null).map(err => err.toUpperCase())")]),n._v(" "),t("p",[n._v("// Either 如果存在right值  对right值进行关系处理 否则对left值进行关系处理\nclass Either extends Functor {\nconstructor(left,right){\nsuper('val')\nthis.left = left\nthis.right = right\n}\nmap(f){\nreturn this.right ? Either.of(this.left,f(this.right)) : Either.of(f(this.left),this.right)\n}\nstatic of (left, right) {\nreturn new Either(left, right)\n}\n}")]),n._v(" "),t("p",[n._v("const edit = Either.of(1,0).map(x => x + 8)")]),n._v(" "),t("p",[n._v("// console.log(edit)")]),n._v(" "),t("p",[n._v("// class Ap extends Functor{\n//   ap(F){\n//     return Ap.of(this.val(F.val))\n//   }\n//   static of(val){\n//     return new Ap(val)\n//   }\n// }\n// const addTwo = x => x + 2\n// const add = x => y => x + y")]),n._v(" "),t("p",[n._v("// const res3 = Ap.of(addTwo).ap(Functor.of(2))\n// const res6 = Ap.of(add).ap(Maybe.of(2)).ap(Maybe.of(3))\n//  console.log(res6)")]),n._v(" "),t("p",[n._v("//  七、ap 函子\n// 函子里面包含的值，完全可能是函数。我们可以想象这样一种情况，一个函子的值是数值，另一个函子的值是函数。")]),n._v(" "),t("p",[n._v("function addTwo(x) {\nreturn x + 2;\n}")]),n._v(" "),t("p",[n._v("const A = Functor.of(2);\nconst B = Functor.of(addTwo)\n// 上面代码中，函子A内部的值是2，函子B内部的值是函数addTwo。\n// 有时，我们想让函子B内部的函数，可以使用函子A内部的值进行运算。这时就需要用到 ap 函子。\n// ap 是 applicative（应用）的缩写。凡是部署了ap方法的函子，就是 ap 函子。\nclass Ap extends Functor {\nap(F) {\nreturn Ap.of(this.val(F.val));\n}\n}\n// 注意，ap方法的参数不是函数，而是另一个函子。\n// 因此，前面例子可以写成下面的形式。\nAp.of(addTwo).ap(Functor.of(2))\n// Ap(4)\n// ap 函子的意义在于，对于那些多参数的函数，就可以从多个容器之中取值，实现函子的链式操作。\nfunction add(x) {\nreturn function (y) {\nreturn x + y;\n};\n}\nAp.of(add).ap(Maybe.of(2)).ap(Maybe.of(3));\n// Ap(5)\n// 上面代码中，函数add是柯里化以后的形式，一共需要两个参数。通过 ap 函子，我们就可以实现从两个容器之中取值。它还有另外一种写法。")]),n._v(" "),t("p",[n._v("Ap.of(add(2)).ap(Maybe.of(3));")])])},[],!1,null,null,null);e.default=r.exports}}]);